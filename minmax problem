import math

def evaluate(board):
    """
    Evaluate the current board state.
    Returns +1 if the computer wins; -1 if the opponent wins; 0 if it's a draw.
    """
    # Check rows, columns, and diagonals
    for row in board:
        if all(cell == 'X' for cell in row):
            return 1
        elif all(cell == 'O' for cell in row):
            return -1
    
    for col in range(3):
        if all(board[row][col] == 'X' for row in range(3)):
            return 1
        elif all(board[row][col] == 'O' for row in range(3)):
            return -1
    
    if board[0][0] == board[1][1] == board[2][2] or board[0][2] == board[1][1] == board[2][0]:
        if board[1][1] == 'X':
            return 1
        elif board[1][1] == 'O':
            return -1
    
    # Check if it's a draw
    if all(cell != ' ' for row in board for cell in row):
        return 0
    
    # If none of the above conditions are met, return None
    return None

def minimax(board, depth, maximizing_player):
    """
    The Minimax algorithm.
    """
    # Base case: if the game is over or maximum depth is reached
    result = evaluate(board)
    if result is not None:
        return result
    
    if maximizing_player:
        max_eval = -math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    eval = minimax(board, depth+1, False)
                    board[row][col] = ' '  # Undo the move
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    eval = minimax(board, depth+1, True)
                    board[row][col] = ' '  # Undo the move
                    min_eval = min(min_eval, eval)
        return min_eval

def find_best_move(board):
    """
    Find the best move for the computer.
    """
    best_eval = -math.inf
    best_move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == ' ':
                board[row][col] = 'X'
                eval = minimax(board, 0, False)
                board[row][col] = ' '  # Undo the move
                if eval > best_eval:
                    best_eval = eval
                    best_move = (row, col)
    return best_move

# Example usage:
if __name__ == "__main__":
    board = [[' ', ' ', ' '],
             [' ', ' ', ' '],
             [' ', ' ', ' ']]

    print("Initial Board:")
    for row in board:
        print(row)
    
    while True:
        player_row = int(input("Enter row (0, 1, or 2): "))
        player_col = int(input("Enter column (0, 1, or 2): "))
        
        if board[player_row][player_col] != ' ':
            print("Invalid move! Try again.")
            continue
        
        board[player_row][player_col] = 'O'
        print("Player's Move:")
        for row in board:
            print(row)
        
        if evaluate(board) is not None:
            break
        
        computer_move = find_best_move(board)
        board[computer_move[0]][computer_move[1]] = 'X'
        print("Computer's Move:")
        for row in board:
            print(row)
        
        if evaluate(board) is not None:
            break
output:
Initial Board:
[' ', ' ', ' ']
[' ', ' ', ' ']
[' ', ' ', ' ']
Enter row (0, 1, or 2): 1
Enter column (0, 1, or 2): 2
Player's Move:
[' ', ' ', ' ']
[' ', ' ', 'O']
[' ', ' ', ' ']
Computer's Move:
[' ', ' ', 'X']
[' ', ' ', 'O']
[' ', ' ', ' ']
Enter row (0, 1, or 2): 1
Enter column (0, 1, or 2): 0
Player's Move:
[' ', ' ', 'X']
['O', ' ', 'O']
[' ', ' ', ' ']
Computer's Move:
[' ', ' ', 'X']
['O', 'X', 'O']
[' ', ' ', ' ']
Enter row (0, 1, or 2): 0
Enter column (0, 1, or 2): 1
Player's Move:
[' ', 'O', 'X']
['O', 'X', 'O']
[' ', ' ', ' ']
Computer's Move:
['X', 'O', 'X']
['O', 'X', 'O']
[' ', ' ', ' ']
Enter row (0, 1, or 2): 2
Enter column (0, 1, or 2): 0
Player's Move:
['X', 'O', 'X']
['O', 'X', 'O']
['O', ' ', ' ']
Computer's Move:
['X', 'O', 'X']
['O', 'X', 'O']
['O', ' ', 'X']
