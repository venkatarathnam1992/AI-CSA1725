from collections import deque

# Function to perform breadth-first search
def bfs(graph, start):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start])  # Initialize a queue with the starting node
    traversal = []  # List to store the traversal order

    while queue:  # Continue until the queue is empty
        node = queue.popleft()  # Dequeue a node from the queue
        if node not in visited:  # Check if the node has not been visited
            visited.add(node)  # Mark the node as visited
            traversal.append(node)  # Add the node to the traversal order
            # Enqueue all adjacent nodes that have not been visited
            queue.extend(adjacent for adjacent in graph[node] if adjacent not in visited)

    return traversal

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Starting node for BFS traversal
start_node = 'A'

# Perform BFS and print the traversal order
print("BFS Traversal Order:")
print(bfs(graph, start_node))
output:
BFS Traversal Order:
['A', 'B', 'C', 'D', 'E', 'F']
