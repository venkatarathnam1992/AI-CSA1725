def is_safe(board, row, col):
    # Check if there is a queen in the same column above
    for i in range(row):
        if board[i][col] == 'Q':
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == 'Q':
            return False

    return True

def solve_n_queens_util(board, row):
    if row >= len(board):
        return True

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 'Q'

            if solve_n_queens_util(board, row + 1):
                return True

            board[row][col] = '-'

    return False

def solve_n_queens(n):
    board = [['-' for _ in range(n)] for _ in range(n)]
    if not solve_n_queens_util(board, 0):
        return False

    return board

def print_solution(board):
    for row in board:
        print(" ".join(row))

if __name__ == "__main__":
    n = 8  # Size of the chessboard
    solution = solve_n_queens(n)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
